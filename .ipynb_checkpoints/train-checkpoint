#!/usr/bin/env python3

import os

import lightgbm as lgbm

from LGBMSelGB import LGBMSelGB
from utils import Timeit, compare_model_error, load_data

base_path = os.getcwd()
datasets_path = os.path.join(base_path, 'datasets')
tmp = os.path.join(datasets_dir, 'istella-X')
train_file = os.path.join(tmp, "train.txt")
valid_file = os.path.join(tmp, "vali.txt")
test_file = os.path.join(tmp, "test.txt")
output_path = os.path.join(base_dir, 'output')
models_path = os.path.join(output_dir, 'models')
results_path = os.path.join(output_dir, 'results')

def train():
    print('Loading data')
    train_data, train_labels, train_query_lens = load_data(train_file)
    print('Training set loaded')
    valid_data, valid_labels, valid_query_lens = load_data(valid_file)
    print('Validation set loaded')
    test_data, test_labels, test_query_lens = load_data(test_file)
    print('Testing set loaded')

    train_set = lgb.Dataset(train_data, label=train_labels, group=train_query_lens)
    try:
        eval_set = [(train_data, train_labels),
                    (valid_data, valid_labels),
                    (test_data, test_labels)]
        eval_group = [train_query_lens, valid_query_lens, test_query_lens]
        eval_names = ['train', 'valid', 'test']
        valid_sets = []
        for i, valid_data in enumerate(eval_set):
            ds = lgb.Dataset(valid_data[0], valid_data[1], group=eval_group[i], reference=train_set)
            valid_sets.append(ds)
    except Exception as e:
        print('No valid sets loaded')
        print(e)
        eval_set = []
        eval_group = []
        eval_names = []

    params = {
        'objective': 'lambdarank',
        'max_position': 10,
        'learning_rate': 0.05,
        'num_leaves': 64,
        'metric': ['ndcg'],
        'ndcg_eval_at': 10
    }

    @Timeit('LGBM train')
    def train_lgbm_model():
        evals_result = {}
        lgb_model = lgb.train(params, train_set, num_boost_round=1000,
                              valid_sets=valid_sets, valid_names=eval_names,
                              verbose_eval=5, evals_result=evals_result)
        return lgb_model, evals_result

    lgb_model, lgb_info = train_lgbm_model()

    strategies = ('fixed', 'random_iter', 'random_query', 'inverse',
                  'wrong_neg', 'equal_size', 'delta')

    selgb_base = LGBMSelGB(n_estimators=1000, n_iter_sample=1, p=0.01, method='fixed')
    selgb_base.fit(train_data, train_labels, train_query_lens,
                   eval_set=eval_set, eval_group=eval_group, eval_names=eval_names,
                   verbose=5)

    selgb1 = LGBMSelGB(n_estimators=1000, n_iter_sample=1, method='wrong_neg')
    selgb1.fit(train_data, train_labels, train_query_lens,
               eval_set=eval_set, eval_group=eval_group, eval_names=eval_names,
               verbose=5)

    selgb2 = LGBMSelGB(n_estimators=1000, n_iter_sample=1, method='equal_size')
    selgb2.fit(train_data, train_labels, train_query_lens,
               eval_set=eval_set, eval_group=eval_group, eval_names=eval_names,
               verbose=5)

    compare_model_error(data=[lgb_info, selgb_base.get_evals_result(),
                              selgb1.get_evals_result(), selgb2.get_evals_result()],
                        names=['LightGBM', 'Selgb', 'Selgb wrong_neg', 'Selgb eq_size'])

    lgb_model.save_model(os.path.join(model_path, 'lightgbm'))
    selgb_base.save_model(os.path.join(model_path, 'selgb_base'))
    selgb1.save_model(os.path.join(model_path, 'selgb_wrong_neg'))
    selgb2.save_model(os.path.join(model_path, 'selgb_eq_size'))


if __name__ == '__main__':
    train()
    sys.exit(0)
